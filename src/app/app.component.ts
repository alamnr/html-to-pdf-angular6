import { Component, ViewChild, ElementRef } from '@angular/core';

import * as jspdf from 'jspdf';
import html2canvas from 'html2canvas';
import { ChartsModule } from 'ng2-charts';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.sass']
})
export class AppComponent {
  title = 'html-to-pdf';
  headingText_1 = 'This Report belongs to: ';
  report_title = 'Upskillable Assessment Report';

  @ViewChild('content') content : ElementRef;
  public downLoadPdf(){
    console.log('Here I am');
    let doc = new jspdf();
    let specialElemHandler = {
      '#editor':function(element,renderer){
        return true;
      }
    };
    let content = this.content.nativeElement;
    doc.fromHTML(content.innerHTML,15,15,{
        'width':190,
        'elementHandlers':specialElemHandler
    });
    doc.save('test.pdf');
  }

  public captureScreen()  
  {  
    var data = document.getElementById('contentToConvert');  
    html2canvas(data).then(canvas => {  
      // Few necessary setting options  
      var imgWidth = 190;   
      var pageHeight = 295;    
      var imgHeight = canvas.height * imgWidth / canvas.width;  
      var heightLeft = imgHeight;  
  
      const contentDataURL = canvas.toDataURL('image/png')  
      let pdf = new jspdf('p', 'mm', 'a4'); // A4 size page of PDF  
      var position = 35;  
      let orgName = 'Google LLC';
      let candidates = [{ name:'Gopi Nath'}];
      pdf.setProperties({ title: 'Assesment Report-'+candidates[0].name });
      
      candidates.forEach(el=>this.headingText_1 +=el.name)
      this.headingText_1 += ' for organization-'+orgName;
      pdf.setFontSize(22);
      pdf.setFont("Montserrat");
      pdf.setFontType("bold");
      pdf.text(105, 20, this.report_title,null,null,'center');
      pdf.setFontSize(10);
      pdf.setFontType("normal");
      pdf.text(105, 30, this.headingText_1,null,null,'center');
      pdf.addImage(contentDataURL, 'PNG', 10, position, imgWidth, imgHeight)  
      
      pdf.setFontSize(8); 
      pdf.line(15, 285, 200, 285);
      pdf.text(16, 290, 'Generated by: '+orgName);
      pdf.text(200, 290, 'Generated at: '+new Date().toDateString(), null, null, 'right');

      pdf.save('MYPdf.pdf'); // Generated PDF 
    });  
  } 
  /*   // lineChart   */
  public lineChartData:Array<any> = [
    {data: [65, 59, 80, 81, 56, 55, 40], label: 'Series A'},
    {data: [28, 48, 40, 19, 86, 27, 90], label: 'Series B'},
    {data: [18, 48, 77, 9, 100, 27, 40], label: 'Series C'}
  ];
  public lineChartLabels:Array<any> = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];
  public lineChartOptions:any = {
    responsive: true
  };
  public lineChartColors:Array<any> = [
    { // grey
      backgroundColor: 'rgba(148,159,177,0.2)',
      borderColor: 'rgba(148,159,177,1)',
      pointBackgroundColor: 'rgba(148,159,177,1)',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(148,159,177,0.8)'
    },
    { // dark grey
      backgroundColor: 'rgba(77,83,96,0.2)',
      borderColor: 'rgba(77,83,96,1)',
      pointBackgroundColor: 'rgba(77,83,96,1)',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(77,83,96,1)'
    },
    { // grey
      backgroundColor: 'rgba(148,159,177,0.2)',
      borderColor: 'rgba(148,159,177,1)',
      pointBackgroundColor: 'rgba(148,159,177,1)',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(148,159,177,0.8)'
    }
  ];
  public lineChartLegend:boolean = true;
  public lineChartType:string = 'line';
 
  public randomize():void {
    let _lineChartData:Array<any> = new Array(this.lineChartData.length);
    for (let i = 0; i < this.lineChartData.length; i++) {
      _lineChartData[i] = {data: new Array(this.lineChartData[i].data.length), label: this.lineChartData[i].label};
      for (let j = 0; j < this.lineChartData[i].data.length; j++) {
        _lineChartData[i].data[j] = Math.floor((Math.random() * 100) + 1);
      }
    }
    this.lineChartData = _lineChartData;
  }
 
  // events
  public chartClicked(e:any):void {
    console.log(e);
  }
 
  public chartHovered(e:any):void {
    console.log(e);
  }

  // Bar Chart
  public barChartOptions:any = {
    scaleShowVerticalLines: false,
    responsive: true
  };
  public barChartLabels:string[] = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'];
  public barChartType:string = 'bar';
  public barChartLegend:boolean = true;
 
  public barChartData:any[] = [
    {data: [65, 59, 80, 81, 56, 55, 40], label: 'Series A'},
    {data: [28, 48, 40, 19, 86, 27, 90], label: 'Series B'}
  ];

}
